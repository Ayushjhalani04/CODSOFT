# -*- coding: utf-8 -*-
"""Titanic_Survival_Prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1JUFH6Sqz3LsdrDaro6ktHnmDO7EfJDF3

#**TITANIC SURVIVAL PREDICTION**
"""

#Importing All Required Libaries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from warnings import filterwarnings
filterwarnings(action='ignore')

#Loading Datasets
pd.set_option('display.max_columns',10,'display.width',1000)
titanic = pd.read_csv("/content/Titanic-Dataset.csv")
titanic.head()

# Display shape of the file data

titanic.shape

# Droping Useless Columns
if 'Ticket' in titanic.columns:
    titanic = titanic.drop(['Ticket'], axis=1)
if 'Cabin' in titanic.columns:
    titanic = titanic.drop(['Cabin'], axis=1)
if 'Name' in titanic.columns:
    titanic = titanic.drop(['Name'], axis=1)

# Checking for Null values
titanic.isnull().sum()

# Description of dataset

titanic.describe(include="all")

titanic.groupby("Survived").mean(numeric_only=True)

numeric_columns = titanic.select_dtypes(include=np.number).columns
correlation_matrix = titanic[numeric_columns].corr()

# Display the correlation matrix
print(correlation_matrix)

"""Number of males and females in titanic"""

male_ind = len(titanic[titanic['Sex'] == 'male'])
print("No of Males in Titanic:",male_ind)

female_ind = len(titanic[titanic['Sex'] == 'female'])
print("No of Females in Titanic:",female_ind)

"""Representation of passengers"""

#Plotting
fig, ax = plt.subplots()
gender = ['Male', 'Female']
index = [577, 314]
bars = ax.bar(gender, index, color=['skyblue', 'lightcoral'], edgecolor='black')
for bar in bars:
    height = bar.get_height()
    ax.text(bar.get_x() + bar.get_width() / 2, height,
            str(height), ha='center', va='bottom')

ax.set_title('Passengers Onboard Titanic', fontsize=14)  # Add a title
ax.set_xlabel("Gender", fontsize=12)  # Customize x-axis label
ax.set_ylabel("Number of People", fontsize=12)  # Customize y-axis label
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)
plt.tight_layout()
plt.show()

alive = len(titanic[titanic['Survived'] == 1])
dead = len(titanic[titanic['Survived'] == 0])
titanic.groupby('Sex')[['Survived']].mean(numeric_only=True)

"""Representation of survival outcomes

"""

# plotting
fig, ax = plt.subplots()
status = ['Survived', 'Dead']
ind = [alive, dead]
bars = ax.bar(status, ind, color=['lightgreen', 'lightcoral'], edgecolor='black')
for bar in bars:
    height = bar.get_height()
    ax.text(bar.get_x() + bar.get_width() / 2, height,
            str(height), ha='center', va='bottom', fontsize=10)

ax.set_title('Titanic Survival Outcome', fontsize=14)
ax.set_xlabel("Status", fontsize=12)
ax.set_ylabel("Number of People", fontsize=12)
ax.spines['top'].set_visible(False)
ax.spines['right'].set_visible(False)

plt.tight_layout()
plt.show()

"""Survival outcome from respective Pclass"""

# importing seaborn  for more attarctive representation
import seaborn as sns
plt.figure(figsize=(12, 5))

# Graph 1: Survival Based on Ticket Class (For those who survived)
plt.subplot(1, 2, 1)
sns.countplot(data=titanic[titanic['Survived'] == 1], x='Pclass', palette='Set2')
plt.title('Survival by Ticket Class (Survived)', fontsize=14)
plt.xlabel('Ticket Class', fontsize=12)
plt.ylabel('Number of Passengers', fontsize=12)

# Graph 2: Survival Based on Ticket Class (For those who did not survive)
plt.subplot(1, 2, 2)
sns.countplot(data=titanic[titanic['Survived'] == 0], x='Pclass', palette='Set1')
plt.title('Survival by Ticket Class (Did Not Survive)', fontsize=14)
plt.xlabel('Ticket Class', fontsize=12)
plt.ylabel('Number of Passengers', fontsize=12)

plt.tight_layout()
plt.show()

"""Survival outcome from different range of age"""

# Figure 1: Age Distribution of Survivors
plt.figure(1, figsize=(8, 6))
plt.hist(titanic.loc[titanic.Survived == 1, 'Age'], bins=np.arange(0, 100, 10),
         color='skyblue', edgecolor='black', density=True)
titanic.loc[titanic.Survived == 1, 'Age'].plot.kde(color='darkblue')
plt.title('Age Distribution of Survivors', fontsize=14)
plt.xlabel('Age', fontsize=12)
plt.ylabel('Relative Frequency', fontsize=12)

# Figure 2: Age Distribution of Non-Survivors
plt.figure(2, figsize=(8, 6))
plt.hist(titanic.loc[titanic.Survived == 0, 'Age'], bins=np.arange(0, 100, 10),
         color='lightcoral', edgecolor='black', density=True)
titanic.loc[titanic.Survived == 0, 'Age'].plot.kde(color='darkred')
plt.title('Age Distribution of Non-Survivors', fontsize=14)
plt.xlabel('Age', fontsize=12)
plt.ylabel('Relative Frequency', fontsize=12)
plt.show()

titanic[["SibSp", "Survived"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)

titanic[["Pclass", "Survived"]].groupby(['Pclass'], as_index=False).mean().sort_values(by='Survived', ascending=False)

titanic[["Age", "Survived"]].groupby(['Age'], as_index=False).mean().sort_values(by='Age', ascending=True)

titanic[["Embarked", "Survived"]].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)

"""Representation from various embarked cities"""

# pie chart
labels = ['C = Cherbourg', 'Q = Queenstown', 'S = Southampton']
sizes = [0.553571, 0.389610, 0.336957]
plt.pie(sizes, labels=labels, autopct='%1.1f%%',
        colors=['skyblue', 'lightcoral', 'gold'],
        explode=[0.05, 0.05, 0.05], shadow=True)
plt.title('Passenger Embarkation Distribution')
plt.show()

# Feature Selection
column_titanic=['Age','Pclass','SibSp','Parch','Fare','Sex','Embarked']
# training values
X=titanic[column_titanic]
# target value
Y=titanic['Survived']

X['Age'].isnull().sum()
X['Pclass'].isnull().sum()
X['SibSp'].isnull().sum()
X['Parch'].isnull().sum()
X['Fare'].isnull().sum()
X['Sex'].isnull().sum()
X['Embarked'].isnull().sum()

#  to fill all the missing values
# age have 177  missing values
#  fill missing values with mean or median form existing values
X['Age']=X['Age'].fillna(X['Age'].median())
X['Age'].isnull().sum()

X['Embarked'] = titanic['Embarked'].fillna(method ='pad')
X['Embarked'].isnull().sum()

# to convert sex into integer value
d={'male':0, 'female':1}
X['Sex']=X['Sex'].apply(lambda x:d[x])
X['Sex'].head()

e={'C':0, 'Q':1 ,'S':2}
X['Embarked']=X['Embarked'].apply(lambda x:e[x])
X['Embarked'].head()

"""Observing accuracy using ML model"""

# With my personal preference I am using Naive Bayes algorithms for training my model
from sklearn.model_selection import train_test_split
X_train, X_test, Y_train, Y_test = train_test_split(X,Y,test_size=0.3,random_state=7)

from sklearn.naive_bayes import GaussianNB
model = GaussianNB()
model.fit(X_train,Y_train)
y_pred = model.predict(X_test)

from sklearn.metrics import accuracy_score
print("Accuracy Score:",accuracy_score(Y_test,y_pred))

from sklearn.metrics import accuracy_score,confusion_matrix,classification_report
confusion_mat = confusion_matrix(Y_test,y_pred)
print(confusion_mat)
print(classification_report(Y_test,y_pred))